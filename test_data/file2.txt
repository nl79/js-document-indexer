ASSIGNMENT 01:   PHP-based Logon System – Installation - 100 pts
Install and test the Ullman logon project, its associated database table, configuration file and its DB connection script.

Objective: Chapter 18 of Ullman's text discusses this project in total detail.  The rest of the text explains basic PHP syntax and techniques.  During the semester, we will modify and add features to this project using PHP to deepen your understanding of PHP's capabilities and of server-side scripting concepts.  We will closely examine its implementation way and use it as a platform for exploring software technologies like jQuery.  Extending any project's features requires a thorough command of its implementation.  Accomplishing this will not only strengthen your understanding of PHP but gives you experience in how to build on pre-existing systems. 

Tasks
1. Unzip code directory at http://web.njit.edu/~mchugh/302/NOTES/D01-ULLMAN/ .  The ch18 entry contains logon project.  Install it on your website in a suitable directory.  Mine was installed at https://web.njit.edu/~mchugh/302/NOTES/ch18/ .

2. Before you can run any of the code, you must first create its users database table as in Chapter 18 p. 573 of text using a tool like phpMyAdmin.  Be careful to follow the data types and default values in the book.  All the attributes except the active attribute are declared as NOT NULL while active defaults to NULL.  Later we will populate the table using the register.php script.  Note: http://dba.stackexchange.com/questions/63/null-or-not-null-by-default .

3. Define the constants in mysqli_connect.php appropriately for your database account.  DB_USE and DB_NAME will probably be the same: your UCID.  We use the newer mysqli PHP commands rather than the former mysql commands.  Note the order of the arguments in the mysqli_connect command.  Asides: The @ symbol before mysqli_connect suppresses error messages, handled here by the if-else statement.  The trigger_error function calls a custom-error handler.  The mysqli_set_charset function specifies the character encoding utf-8 used for exchanging data with database.
 
4. Define the config_inc.php's PHP file constants (under the includes directory).   LIVE indicates whether system is in development state (False) or production state (True).  The default is False since we are experimenting with the system. In that case the custom-error function defined in this file sends error messages directly to the browser rather than the administrator email address.  EMAIL should be your email address for administrator messages (remember you are your login system administrator) from your copy of the login system.  The BASE_URL and MYSQL constants are the most important.  The BASE_URL is concatenated in the project code to conveniently do redirects to other project scripts.  It should point to the URL root directory under which you project is stored (http:// etc).   Include a slash / as the last character so in the project correct redirection/relocation addresses (like to a file target.php) can be generated merely by writing BASE_URL  .  target.php where dot is the concatenation operator.  The BASE_URL has to be an absolute url (http://etc) because of how it will be used as a hyperlink in an email.  To point MYSQL to the Database connection script use ../ to move the reference up one directory (that makes sense because the configuration file code will be in files like register.php when it executes.) The configuration file helps keep the code portable: we can move the system to another site and most likely only have to change some constants in the configuration. For now we ignore the rest of the configuration file.   Be able to understand the use of require ('includes/config.inc.php') and require (MYSQL) in the beginning of register.php.

5. Use the register.php script since this is the basic way to populate the database.   The first and last names and passwords have to follow the validation rules enforced at registration. The registration process requires the user to click a link in a received email to complete registration.  So use your own email address/es to create some entries.  (If you use fake emails you won't get the activation email.)  Alternatives: You can also use the mailinator.com site to let you create entries with addresses like harry1@mailinator.com.  You might use names like harry1-yourUCID to ensure they don't land on existing mailinator mailboxes.  You can then check that site for your registration email and click the authorization hyperlink.  You can also use phpMyAdmin to manually enter users and just click the active column to NULL to bypass the registration activation process. You could also import a file of entries into the database directly, bypassing the registration process but if read a .csv file you have to have hashed versions of the passwords.  You could also use an SQL import file and generate lots of entries easily by editing.  Administrative users: Make at least one administrative user (user_level 1) to allow testing features that are restricted to administrators only.

6.  Confirm successful registration by using login.  Then check logout.  Observe the behavior of the dynamic navigation menu depending on whether you are logged in, logged out, administrator or not.

7. I will evaluate work by checking its correctness and your understanding of the installation, either at your desk or possibly via a link to your project that I access on my laptop browser and display on the classroom projection system.   I will give a lot of individual assistance in class on all of this, sometimes projecting on the board so everyone can benefit from the discussion issues.

8. Additionally start building your understanding of the code, first for the header.html, footer.html and register.php files. This will not only give you a better understanding of PHP programming techniques and syntax and system design, but also prepare you to make extensions to the system as in upcoming homeworks.  The book has lots of detail in chapter 18 and earlier chapters can be used as reference for syntax issues.  


 

